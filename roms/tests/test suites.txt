Both test ROMs will print a number with the failing test.
In case everything passes the screen will print OK.

Test suite #1:

01: 3XNN verify that the jump condition is fair
02: 5XY0 verify that the jump condition is fair
03: 4XNN verify that the jump condition is fair
04: 7XNN check the result of the addition
05: 8XY5 verify that VF is set to 0 when there is a borrow
06: 8XY5 verify that VF is set to 1 when there is no borrow
07: 8XY7 verify that VF is set to 0 when there is a borrow
08: 8XY7 verify that VF is set to 1 when there is no borrow
09: 8XY1 check the result of the OR operation
10: 8XY2 check the result of AND operation
11: 8XY3 check the result of the XOR operation
12: 8XYE verify that VF is set to the MSB (most significant bit or most left)
    before the shift and VF does not take value 0 every time
13: 8XYE verify that VF is set to the MSB (most significant bit or most left)
    before the shift and  VF does not take value 1 every time 
14: 8XY6 verify that VF is set to the LSB (least significant bit or most right)
    before the shift and  VF does not take value 0 every time
15: 8XY6 verify that VF is the LSB (least significant bit or most right)
    before the shift and  VF does not take value 1 every time 
16: FX55 and FX65 verify that these two opcodes are implemented.
    The error may come from one or the other or both are defects.
17: FX33 calculating the binary representation is mistaken or the result
    is poorly stored into memory or poorly poped (FX65 or FX1E).

Test suite #2:

0: 3XNN
1: 4XNN
2: 5XY0
3: 7XNN (not carry flag and overflow value)
4: 8XY0
5: 8XY1
6: 8XY2
7: 8XY3
8: 8XY4
9: 8XY5
10: 8XY6
12: 8XY7
12: 8XYE
13: 9XY0
14: BNNN
15: CXNN  Note: Always a small chance of failure if(rand() == rand()) { fail }
16: FX07  Note: If fail it may be because either FX15 or FX07 fails or because delay_timer is 
                not implemented. If the the emulation is too fast this might also fail. 
17:FX33/FX65/ANNN
18:FX55/FX65
19: FX1E

Test suite #3:

3XNN	00EE	8XY5
4XNN	8XY0	8XY6
5XY0	8XY1	8XYE
7XNN	8XY2	FX55
9XY0	8XY3	FX33
ANNN	8XY4	1NNN

Test suite #4 (TBDs are not very useful):

INI - Emulator initialization failed. When program starts, all registers (V0-VF) must be set to 0.
BCD - BCD instruction problems.
0 - Problems with Fx65 instruction. Can't load zeroes from memory to registers.
1 - System font 8x5 not found. In memory at offset 000h - zeroes.
2 - Addition without overflow (254+1). VF register need to be set to 0, but after operation it is still 1
3 - After operation 254+1, register v0 needs to be set to 255, but it doesn't.
4 - Addition with overflow (255+1). VF register must be set to 1, but after operation it is still 0
5 - Wrong result after addition operation (255+1). Must be 0.
6 - After subtraction 1-1 register VF must be 1, but it is still 0.
7 - Wrong result after 1-1 operation. Result must be 0.
8 - Subtract 0-1. VF register must be 0, but it is still 1
9 - Wrong result after 0-1 operation. Register v0 must be 255.
10 - TBD
11 - TBD
12 - TBD
13 - TBD
14 - TBD
15 - TBD
16 - TBD
17 - TBD
18 - TBD
19 - TBD
20 - TBD
21 - TBD
22 - TBD
23 - Can not restore HP48 flags (FX75/FX85 instructions).
24 - Check FX1E (I = I + VX) buffer overflow. If buffer overflows, register VF must be set to 1, otherwise 0. As a result, register VF not set to 1. This undocumented feature of the Chip-8 and used by Spacefight 2019!